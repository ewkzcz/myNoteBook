<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 此处用于写sql语句,其中namespace: 名称空间-->
<mapper namespace="ewk.code02.mapper.StudentSheet1Mapper">  <!--包名.接口名-->
    <!-- 1.名称冲突问题
    数据库表字段名称和实体类的属性名称不一样: 有构造函数时,安装构造函数的顺序装填; 没有构造函数时,不一样字段变为null
    解决办法:
    1.as起别名,让别名和实体类的属性名一样;
    2.sql字段;
    3.resultMap字段(resultType改为resultMap)
    -->
    <!-- 2.参数
    参数占位符:
    ${}: 存在sql注入问题(使用时机: 表名或列名不固定的情况下,可以使用${})
    #{}: 会替换为?,为了防止sql注入
    参数类型: parameterType可以省略
    特殊字符处理: 转义字符,CDATA区(输入CD)
    -->
    <!-- 3.条件查询的参数传递
    1.散装参数: @Param("SQL参数占位符")
    2.对象参数
    3.map集合参数
    -->
    <!-- 4.模糊查询
    like对数字不起作用,没有使用%时也不起作用,%表示任意字符
    -->
    <!-- 5.动态sql语句,动态多条件条件查询(if,where...)
    <if test="id!=null">id = #{id}</if>  数字与null对比
    <if test="name!=null and name!=''">stu_name like #{name}</if> 字符串与null和空串对比
    动态条件查询的问题: 第一个查询条件不包含and,不能注释,后续查询条件包含and
    解决办法: <where>替换where子句
    -->
    <!-- 6.单条件条件查询(choose类似于switch,when类似于case)
    查询的注意事项: Data类中整数必须为Integer类型,否则无法使用(id!=null)判断有输入,int类型默认初始化为0
    <where>
        <choose>
            <when test="id != null">stu_id = #{id}</when>
            <when test="name != null and name!=''">stu_name like #{name}</when>
            <when test="age != null">stu_age = #{age}</when>
            <when test="bir != null and bir != ''">stu_bir like #{bir}</when>
        </choose>
    </where>
    -->
    <!-- 7.批量删除数据,传递id数组
    mybatis会将数组参数封装为一个map集合:
    默认array=数组, 使用@Param注解改变map集合的默认key名称
    -->
    <!-- 8.动态修改数据
    <set>标签,防止要修改内容的全部输入为空及','问题
     <update id="update">
        update sheet1
        <set>
            <if test="name != null and name!=''">stu_name = #{name},</if>
            <if test="age != null">stu_age = #{age},</if>
            <if test="bir != null and bir != ''">stu_bir = #{bir}</if>
        </set>
        where stu_id=#{id};
    </update>
    -->
    <!-- 9.参数传递: 推荐采用@Param的方法
    MyBatis参数封装规则(ParamNameResolver实现封装功能):
    1. 单个参数:
    直接使用: POJO类型,Map类型,其他类型
    封装为Map集合(arg0,collection/list/array): Collection,List,Array
    2.多个参数
    arg0,arg1,... or param1,param2,...
    -->


    <!-- sql字段-->
    <sql id="brand_column">
        stu_id as id,stu_name as name,stu_age as age,stu_bir
    </sql>

    <!-- resultMap字段-->
    <resultMap id="studentSheet1ResultMap" type="ewk.code02.Data">
        <!-- 主键字段的映射-->
        <id column="stu_id" property="id"/>
        <result column="stu_name" property="name"/>
        <result column="stu_age" property="age"/>
        <result column="stu_bir" property="bir"/>
        <!-- 一般字段的映射-->
    </resultMap>

    <!-- 查询全部-->
    <!--
        <select id="selectAll" resultType="ewk.code02.Data">  包名.数据类
            select stu_id as id,stu_name as name,stu_age as age,stu_bir as bir from sheet1;
        </select>
    -->

    <!-- 查询全部-->
    <!--
        <select id="selectAll" resultType="ewk.code02.Data">  包名.数据类
            select <include refid="brand_column"></include> from sheet1;
        </select>
    -->

    <!-- 查询全部 -->
    <select id="selectAll" resultMap="studentSheet1ResultMap">  <!-- resultMap字段id -->
        select stu_age,stu_name,stu_id,stu_bir from  sheet1;
    </select>

    <!-- 查看详情 -->
    <!--
        <select id="selectById" resultMap="studentSheet1ResultMap">
            select * from sheet1 where stu_id > #{id}; 错误
            select * from sheet1 where stu_id &gt; #{id};  转义
        </select>
    -->

    <!-- 查看详情 -->
    <select id="selectById" resultMap="studentSheet1ResultMap">
        select * from sheet1 where stu_id <![CDATA[
        >
        ]]> #{id};
    </select>

    <!-- 多条件查询 -->
    <select id="selectByCondition" resultMap="studentSheet1ResultMap">
        select * from sheet1
        <where>
        <if test="id != null">and stu_id = #{id}</if>
        <if test="name != null and name!=''">and stu_name like #{name}</if>
        <if test="age != null">and stu_age = #{age}</if>
        <if test="bir != null and bir != ''">and stu_bir like #{bir}</if>;
        </where>
    </select>

    <!-- 单条件查询 -->
    <select id="selectByConditionSingle" resultMap="studentSheet1ResultMap">
        select * from sheet1
        <where>
            <choose>  <!-- 类似于switch -->
                <when test="id != null">stu_id = #{id}</when>  <!-- 类似于case -->
                <when test="name != null and name!=''">stu_name like #{name}</when>
                <when test="age != null">stu_age = #{age}</when>
                <when test="bir != null and bir != ''">stu_bir like #{bir}</when>
            </choose>
        </where>
    </select>

    <!-- 添加数据,无返回 -->
    <insert id="add">
        INSERT INTO sheet1(stu_id,stu_name,stu_age,stu_bir)
        VALUES(#{id},#{name},#{age},#{bir});
    </insert>

    <!-- 添加数据,返回id -->
    <insert id="addReturnId" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sheet1(stu_id,stu_name,stu_age,stu_bir)
        VALUES(#{id},#{name},#{age},#{bir});
    </insert>

    <!-- 删除一个数据 -->
    <delete id="deleteById">
        DELETE FROM sheet1 WHERE stu_id = #{id};
    </delete>

    <!-- 批量删除数据 -->
    <delete id="deleteByIds">
        DELETE FROM sheet1 WHERE stu_id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}
            </foreach>;
    </delete>

    <!-- 动态修改数据 -->
    <update id="update">
        update sheet1
        <set>
            <if test="name != null and name!=''">stu_name = #{name},</if>
            <if test="age != null">stu_age = #{age},</if>
            <if test="bir != null and bir != ''">stu_bir = #{bir}</if>
        </set>
        where stu_id=#{id};
    </update>

</mapper>